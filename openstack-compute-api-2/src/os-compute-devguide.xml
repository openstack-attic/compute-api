<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        <!ENTITY plusmn "&#xB1;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

        <!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="figures/Check_mark_23x20_02.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>

        <!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
                 <imageobject>
                  <imagedata fileref="figures/Arrow_east.svg"
                             format="SVG" scale="60"/>
                </imageobject>
              </inlinemediaobject>'>
]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:db="http://docbook.org/ns/docbook" version="5.0"
    xml:id="os-cs-devguide">
    <title>OpenStack Compute API v2 and Extensions Reference</title>
    <?rax title.font.size="26px" subtitle.font.size="26px"?>
    <titleabbrev>Compute API and Extensions
        Reference</titleabbrev>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>OpenStack Foundation</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2009</year>
            <year>2010</year>
            <year>2011</year>
            <year>2012</year>
            <year>2013</year>
            <holder>OpenStack Foundation</holder>
        </copyright>
        <releaseinfo>API v2</releaseinfo>
        <productname>OpenStack Compute API v2 and Extensions</productname>
        <pubdate/>
        <legalnotice role="apache2">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing applications using the
                OpenStack Compute Application Programming Interface
                    (<abbrev>API</abbrev>). </para>
        </abstract>
        <revhistory>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2013-05-22</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Updated the book title for
                                consistency.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2013-04-27</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Changed title of this book to
                                reflect that it contains Compute
                                extensions.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2013-04-17</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Added <xref
                                   linkend="ext-os-admin-actions"/> to
                                document the server admin actions
                                extension.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2012-05-30</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Added more descriptive information
                                about the request body attributes to
                                the create server API
                                operation.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <!-- ... continue addding more revisions here as you change this document using the markup shown below... -->
                <date>2012-05-02</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Added <code>SHUTOFF</code> to the
                                list of server status values for the
                                list servers API operation.</para>
                        </listitem>
                        <listitem>
                            <para>Updated the description for the
                                   <code>SUSPENDED</code> server
                                status value for the list servers API
                                operation.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-04-24</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Updated to use color-coded syntax
                                formatting in request and response
                                examples.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-03-25</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Added descriptions of URI parameters
                                and request body attributes for API
                                operations.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2012-02-14</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated the API version from v1.1 to
                                v2.</para>
                        </listitem>
                        <listitem>
                            <para>No longer use mimetype parameters to
                                denote version.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-11-08</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Removed DRAFT designation.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>

            <revision>
                <date>2011-09-08</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Added <parameter>limit</parameter>
                                and <parameter>marker</parameter>
                                parameters to list operations. </para>
                        </listitem>
                        <listitem>
                            <para>The rebuild action behaves just like
                                create: an imageRef is used and a
                                password may be specified. </para>
                        </listitem>
                        <listitem>
                            <para>Added tenant and user_id attributes
                                to server and image. </para>
                        </listitem>
                        <listitem>
                            <para>Added vcpus attribute to flavors.
                            </para>
                        </listitem>
                        <listitem>
                            <para>The flavorRef attribute is now used in the resize
                                action. </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-07-23</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Added missing response examples for
                                server update. </para>
                        </listitem>
                        <listitem>
                            <para>Ensure consistent HTTP status codes
                                for all resources. </para>
                        </listitem>
                        <listitem>
                            <para>Clarifications on setting and
                                changing a server password. </para>
                        </listitem>
                        <listitem>
                            <para>Minor updates to metadata section
                                for clarity. </para>
                        </listitem>
                        <listitem>
                            <para>Discuss alternate links. </para>
                        </listitem>
                        <listitem>
                            <para>Removed version number from compute
                                media types &mdash; use a media type
                                parameter instead. </para>
                        </listitem>
                        <listitem>
                            <para>Bought back the flavorRef and
                                imageRef server attributes these are
                                now only used when creating a server.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Made the create image operation a
                                server action. </para>
                        </listitem>
                        <listitem>
                            <para>Added minDisk and minRam filters to
                                flavor lists. </para>
                        </listitem>
                        <listitem>
                            <para>Added minDisk and minRam attributes
                                to images. </para>
                        </listitem>
                        <listitem>
                            <para>Asynchronous faults may now contain
                                a timestamp. </para>
                        </listitem>
                        <listitem>
                            <para>Changes-since request returns an
                                empty list rather than a 304. </para>
                        </listitem>
                        <listitem>
                            <para>Added DELETED image status. </para>
                        </listitem>
                        <listitem>
                            <para>Fix content length in <xref
                                   linkend="ImageCreateFullResponse"
                                />. </para>
                        </listitem>
                        <listitem>
                            <para>Fixed bad request error code in
                                   <xref
                                   linkend="Server_Passwords-d1e2510"
                                />. </para>
                        </listitem>
                        <listitem>
                            <para>Compact image, server, and flavor
                                lists should contain IDs, names, and
                                links (Any kind of link may be
                                included &mdash; not just self links).
                            </para>
                        </listitem>
                        <listitem>
                            <para>Changed metadata URI from .../meta
                                to .../metadata for consistency.
                            </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-06-29</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Renamed Primary IP to Access IP.
                            </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-06-23</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Many minor updates based on
                                community feedback. </para>
                        </listitem>
                        <listitem>
                            <para>Removed sections on Content
                                Compression, Persistent Connections,
                                and Caching &mdash; these are operator
                                specific. Added section on HTTP.
                            </para>
                        </listitem>
                        <listitem>
                            <para>A Location header is returned when
                                creating servers/images. </para>
                        </listitem>
                        <listitem>
                            <para>Added filters to collection of
                                Image, Servers, and Flavors. </para>
                        </listitem>
                        <listitem>
                            <para>Added asynchronous faults. </para>
                        </listitem>
                        <listitem>
                            <para>Updates to links and references.
                                Remove serverRef, imageRef, and
                                flavorRef and instead embed one entity
                                in another to provide links. </para>
                        </listitem>
                        <listitem>
                            <para>Added primary IP addresses. </para>
                        </listitem>
                        <listitem>
                            <para>Added forbidden fault. </para>
                        </listitem>
                        <listitem>
                            <para>We now use a single bookmark link
                                per entity regardless of mimetype.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Collections are now sorted by create
                                time. </para>
                        </listitem>
                        <listitem>
                            <para>Previous links are no longer
                                required. </para>
                        </listitem>
                        <listitem>
                            <para>Added the ability to create or
                                update multiple metadata items
                                simultaneously. </para>
                        </listitem>
                        <listitem>
                            <para>Minor cleanups to server and image
                                state machine. </para>
                        </listitem>
                        <listitem>
                            <para>Update to JSON collection format.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Replace integer IDs with UUIDs.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Removed affinityID, this will likely
                                come in as an extension. </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-04-25</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Some minor cleanups in preparation
                                for OpenStack Summit discussion.
                            </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-03-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Many minor updates based on
                                community feedback. </para>
                        </listitem>
                        <listitem>
                            <para>Updates to resource linking and
                                references. </para>
                        </listitem>
                        <listitem>
                            <para>Better description of paginated
                                collections. </para>
                        </listitem>
                        <listitem>
                            <para>Metadata supported in servers and
                                images. </para>
                        </listitem>
                        <listitem>
                            <para>Dropped support for shared IP
                                groups. </para>
                        </listitem>
                        <listitem>
                            <para>IPs organized by network id, vs
                                simply having public and private IPs.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Generalized affinity id. </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2011-02-09</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release. </para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>


    </info>
    <preface xml:id="preface">
        <title>Preface</title>
        <para>OpenStack Compute is a compute service that provides
            server capacity in the cloud. Compute Servers come in
            different flavors of memory, cores, disk space, and CPU,
            and can be provisioned in minutes. Interactions with
            Compute Servers can occur programmatically via the
            OpenStack Compute API. </para>
        <para>We welcome feedback, comments, and bug reports at <link
                xlink:href="http://bugs.launchpad.net/nova"
                >bugs.launchpad.net/nova</link>. </para>
        <section xml:id="Intended_Audience-d1e85">
            <title>Intended Audience</title>
            <para>This guide assists software developers who want to
                develop applications using the OpenStack Compute API.
                To use this information, you should have access to an
                account from an OpenStack Compute provider, and you
                should also be familiar with the following concepts: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>OpenStack Compute service</para>
                </listitem>
                <listitem>
                    <para>ReSTful web services</para>
                </listitem>
                <listitem>
                    <para>HTTP/1.1</para>
                </listitem>
                <listitem>
                    <para>JSON and/or XML data serialization
                        formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e118">
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
                obsoletes all previous versions. The most recent
                changes are described in the table below:</para>
            <?rax revhistory?>
            <!-- Table generated in output from revision element in the book element -->
        </section>
        <?hard-pagebreak?>
        <section xml:id="Additional_Resources-d1e346">
            <title>Additional Resources</title>
            <para>You can download the most current version of this
                document from the OpenStack Docs website at <link
                    xlink:href="http://docs.openstack.org">
                    http://docs.openstack.org</link>. </para>
        </section>
    </preface>

    <chapter xml:id="General_API_Information-d1e436">
        <title>General API Information</title>
        <para>The OpenStack Compute API is defined as a ReSTful HTTP
            service. The API takes advantage of all aspects of the
            HTTP protocol (methods, URIs, media types, response codes,
            etc.) and providers are free to use existing features of
            the protocol such as caching, persistent connections, and
            content compression among others. For example, providers
            who employ a caching layer may respond with a 203 when a
            request is served from the cache instead of a 200.
            Additionally, providers may offer support for conditional
            &GET; requests using ETags, or they may send a redirect in
            response to a &GET; request. Clients should be written to
            account for these differences. </para>
        <para>Providers can return information identifying requests in
            HTTP response headers, for example, to facilitate
            communication between the provider and client users. </para>
        <xi:include href="section_concepts.xml"/>
        <section xml:id="Authentication-d1e444">
            <title>Authentication</title>
            <para>Each HTTP request against the OpenStack Compute
                system requires the inclusion of specific
                authentication credentials. A single deployment may
                support multiple authentication schemes (OAuth, Basic
                Auth, Token). The authentication scheme used is
                determined by the provider of the OpenStack Compute
                system. Please contact your provider to determine the
                best way to authenticate against this API. </para>
            <note>
                <para>Some authentication schemes may require that the
                    API operate using SSL over HTTP (HTTPS). </para>
            </note>
        </section>
        <section xml:id="Request_Response_Types-d1e459">
            <title>Request/Response Types</title>
            <para>The OpenStack Compute API supports both JSON and XML
                data serialization request and response formats. </para>
            <para>You specify the request format in the
                    <code>Content-Type</code> header in the request.
                This header is required for operations that have a
                request body. The syntax for the
                    <code>Content-Type</code> header is:
                <programlisting>Content-Type: application/<parameter>format</parameter></programlisting></para>
            <para>Where <parameter>format</parameter> is either
                    <literal>json</literal> or
                <literal>xml</literal>.</para>
            <para>You specify the response format by using one of the
                following methods:</para>
            <itemizedlist>
                <listitem>
                    <para><code>Accept</code> header. The syntax for
                        the <code>Accept</code> header is:
                        <programlisting>Accept: application/<parameter>format</parameter></programlisting></para>
                    <para>Where <parameter>format</parameter> is
                        either <constant>json</constant> or
                            <constant>xml</constant>.</para>
                    <para>Default is <literal>json</literal>.</para>
                </listitem>
                <listitem>
                    <para>Query extension. Add an
                            <literal>.xml</literal> or
                            <literal>.json</literal> extension to the
                        request URI. For example, the
                            <literal>.xml</literal> extension in the
                        following URI request specifies that the
                        response body is returned in XML
                        format:</para>
                    <literallayout role="monospace">&POST; /v2/010101/servers.xml</literallayout>
                </listitem>
            </itemizedlist>
            <para>If you do not specify a response format, JSON is the
                default.</para>
            <para>If you specify conflicting formats in the
                    <code>Accept</code> header and the query
                extension, the format specified in the query extension
                takes precedence. For example, if the query extension
                is <literal>.xml</literal> and the <code>Accept</code>
                header specifies <literal>application/json</literal>,
                the response is returned in XML format.</para>
            <para>You can serialize a response in a different format
                from the request format. <xref linkend="JSON_req"/>
                and <xref linkend="ImageCreateFullResponse"/> show a
                request body in JSON format and a response body in XML
                format. </para>
            <example xml:id="JSON_req">
                <title>Request with Headers: JSON</title>
                <literallayout role="monospace"><?db-font-size 70%?>POST /v2/010101/servers HTTP/1.1
Host: servers.api.openstack.org
Content-Type: application/json
Accept: application/xml
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb</literallayout>
                <programlisting language="json"><?db-font-size 70%?><xi:include href="samples/server-post-req.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para><xref linkend="ImageCreateFullResponse"/> shows the
                headers and XML response returned by the JSON
                request:</para>
            <example xml:id="ImageCreateFullResponse">
                <title>Response with Headers: XML</title>
                <literallayout role="monospace"><?db-font-size 70%?>HTTP/1.1 202 Accepted
Date: Mon, 23 Jul 2012 20:24:48 GMT
Content-Length: 582
Location: https://servers.api.openstack.org/v2/010101/servers/06dba123-2c7e-4639-bea0-09fbe219b056
Content-Type: application/xml
X-Compute-Request-Id: req-ab05045a-452f-4b46-be0d-86494da02a2b
Server: Jetty(8.0.y.z-SNAPSHOT)</literallayout>
                <programlisting language="xml"><?db-font-size 70%?><xi:include href="samples/server-post-resp.xml" parse="text"/></programlisting>
            </example>
            <para>The following example shows an alternative method of
                achieving the same result. The following request uses
                an URI extension of <literal>.xml</literal> instead of
                an <code>Accept</code> header to request an XML
                response.</para>
            <note>
                <para>The XML response is not shown. </para>
            </note>
            <example xml:id="diff_serialization">
                <title>JSON Request with XML Query Extension for the
                    Response</title>
                <literallayout role="monospace"><?db-font-size 70%?>POST /v2/010101/servers<emphasis role="bold">.xml</emphasis> HTTP/1.1
Host: servers.api.openstack.org
Content-Type: application/json
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb</literallayout>
                <programlisting language="json"><?db-font-size 70%?><xi:include href="samples/server-post-req.json" parse="text"/></programlisting>
            </example>
        </section>
        <?hard-pagebreak?>
        <section xml:id="LinksReferences">
            <title>Links and References</title>
            <para>Often resources need to refer to other resources.
                For example, when creating a server, you must specify
                the image from which to build the server. You can
                specify the image by providing an ID or a URL to a
                remote image. When providing an ID, it is assumed that
                the resource exists in the current OpenStack
                deployment. </para>
            <?hard-pagebreak?>
            <example>
                <title>ID Image Reference: JSON</title>
                <programlisting language="json"><xi:include href="samples/server-post-req-short.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>ID Image Reference: XML</title>
                <programlisting language="xml"><xi:include href="samples/server-post-req-short.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Full Image Reference: JSON</title>
                <programlisting language="json"><xi:include href="samples/server-post-req.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>Full Image Reference: XML</title>
                <programlisting language="xml"><xi:include href="samples/server-post-req.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para>For convenience, resources contain links to
                themselves. This allows a client to easily obtain
                rather than construct resource URIs. The following
                types of link relations are associated with resources: <itemizedlist>
                    <listitem>
                        <para>A <code>self</code> link contains a
                            versioned link to the resource. Use these
                            links when the link will be followed
                            immediately.</para>
                    </listitem>
                    <listitem>
                        <para>A <code>bookmark</code> link provides a
                            permanent link to a resource that is
                            appropriate for long term storage.</para>
                    </listitem>
                    <listitem>
                        <para>An <code>alternate</code> link can
                            contain an alternate representation of the
                            resource. For example, an OpenStack
                            Compute image might have an alternate
                            representation in the OpenStack Image
                            service.</para>
                    </listitem>
                </itemizedlist>Note that the type attribute here is
                used to provide a hint as to the type of
                representation to expect when following the link. </para>

            <?hard-pagebreak?>
            <example>
                <title>Server with Self Links: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/server-simple.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>Server with Self Links: XML</title>
                <programlisting language="xml"><xi:include href="samples/server-simple.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Server with Alternate Link: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/image-simple.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>Image with Alternate Link: XML</title>
                <programlisting language="xml"><xi:include href="samples/image-simple.xml" parse="text"/></programlisting>
            </example>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Paginated_Collections-d1e664">
            <title>Paginated Collections</title>
            <para>To reduce load on the service, list operations will
                return a maximum number of items at a time. The
                maximum number of items returned is determined by the
                compute provider. To navigate the collection, the
                parameters <parameter>limit</parameter> and
                    <parameter>marker</parameter> can be set in the
                URI
                    (e.g.?<parameter>limit</parameter>=100&amp;<parameter>marker</parameter>=1234).
                The <parameter>marker</parameter> parameter is the ID
                of the last item in the previous list. Items are
                sorted by create time in descending order. When a
                create time is not available they are sorted by ID.
                The <parameter>limit</parameter> parameter sets the
                page size. Both parameters are optional. If the client
                requests a <parameter>limit</parameter> beyond that
                which is supported by the deployment an overLimit
                    (<errorcode>413</errorcode>) fault may be thrown.
                A marker with an invalid ID will return a badRequest
                    (<errorcode>400</errorcode>) fault. </para>
            <para>For convenience, collections are required to contain
                atom "next" links. They may optionally also contain
                "previous" links. The last page in the list will not
                contain a "next" link. The following examples
                illustrate three pages in a collection of images. The
                first page was retrieved via a &GET; to
                http://servers.api.openstack.org/v2/1234/images?limit=1.
                In these examples, the <parameter>limit</parameter>
                parameter sets the page size to a single item.
                Subsequent links will honor the initial page size.
                Thus, a client may follow links to traverse a
                paginated collection without having to input the
                    <parameter>marker</parameter> parameter. </para>
            <?hard-pagebreak?>
            <example>
                <title>Images Collection, First Page: XML</title>
                <programlisting language="xml"><xi:include href="samples/images-page1.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Images Collection, First Page: JSON</title>
                <programlisting language="json"><xi:include href="samples/images-page1.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Images Collection, Second Page: XML</title>
                <programlisting language="xml"><xi:include href="samples/images-page2.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Images Collection, Second Page: JSON</title>
                <programlisting language="json"><xi:include href="samples/images-page2.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Images Collection, Last Page: XML</title>
                <programlisting language="xml">
<xi:include href="samples/images-page3.xml" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Images Collection, Last Page: JSON</title>
                <programlisting language="json"><xi:include href="samples/images-page3.json" parse="text"/></programlisting>
            </example>
            <para>In JSON, members in a paginated collection are
                stored in a JSON array named after the collection. A
                JSON object may also be used to hold members in cases
                where using an associative array is more practical.
                Properties about the collection itself, including
                links, are contained in an array with the name of the
                entity an underscore (_) and <code>links</code>. The
                combination of the objects and arrays that start with
                the name of the collection and an underscore represent
                the collection in JSON. The approach allows for
                extensibility of paginated collections by allowing
                them to be associated with arbitrary properties. It
                also allows collections to be embedded in other
                objects as illustrated below. Here, a subset of
                metadata items are presented within the image. Clients
                must follow the "next" link to retrieve the full set
                of metadata. </para>
            <?hard-pagebreak?>
            <example>
                <title>Paginated Metadata in an Image: XML</title>
                <programlisting language="xml">
<xi:include href="samples/image-meta-page1.xml" parse="text"/>
                </programlisting>
            </example>
            <example>
                <title>Paginated Metadata in an Image: JSON</title>
                <programlisting language="json"><xi:include href="samples/image-meta-page1.json" parse="text"/></programlisting>
            </example>
        </section>
        <?hard-pagebreak?>
        <section xml:id="ChangesSince">
            <title>Efficient Polling with the
                    <parameter>Changes-Since</parameter>
                Parameter</title>
            <para>The ReST API allows you to poll for the status of
                certain operations by performing a &GET; on various
                elements. Rather than re-downloading and re-parsing
                the full status at each polling interval, your ReST
                client may use the
                    <parameter>changes-since</parameter> parameter to
                check for changes since a previous request. The
                    <parameter>changes-since</parameter> time is
                specified as an <link
                    xlink:href="http://en.wikipedia.org/wiki/ISO_8601"
                    >ISO 8601</link> dateTime (2011-01-24T17:08Z). The
                form for the timestamp is CCYY-MM-DDThh:mm:ss. An
                optional time zone may be written in by appending the
                form &plusmn;hh:mm which describes the timezone as an
                offset from UTC. When the timezone is not specified
                (2011-01-24T17:08), the UTC timezone will be assumed.
                If nothing has changed since the
                    <parameter>changes-since</parameter> time, an
                empty list will be returned. If data has changed, only
                the items changed since the specified time will be
                returned in the response. For example, performing a
                &GET; against
                    https://api.servers.openstack.org/v2/224532/servers?<parameter>changes-since</parameter>=2011-01-24T17:08Z
                would list all servers that have changed since Mon, 24
                Jan 2011 17:08:00 UTC. </para>
            <para>To allow clients to keep track of changes, the
                changes-since filter displays items that have been
                    <emphasis>recently</emphasis> deleted. Both images
                and servers contain a <code>DELETED</code> status that
                indicates that the resource has been removed.
                Implementations are not required to keep track of
                deleted resources indefinitely, so sending a changes
                since time in the distant past may miss deletions.
            </para>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Limits-d1e846">
            <title>Limits</title>
            <para>Accounts may be pre-configured with a set of
                thresholds (or limits) to manage capacity and prevent
                abuse of the system. The system recognizes two kinds
                of limits: <firstterm>rate limits</firstterm> and
                    <firstterm>absolute limits</firstterm>. Rate
                limits are thresholds that are reset after a certain
                amount of time passes. Absolute limits are fixed.
                Limits are configured by operators and may differ from
                one deployment of the OpenStack Compute service to
                another. Please contact your provider to determine the
                limits that apply to your account or see <xref
                    linkend="ProgramaticLimits"/>. Your provider may
                be able to adjust your account's limits if they are
                too low. </para>
            <section xml:id="Rate_Limits-d1e862">
                <title>Rate Limits</title>
                <para>Rate limits are specified in terms of both a
                    human-readable wild-card URI and a
                    machine-processable regular expression. The
                    human-readable limit is intended for displaying in
                    graphical user interfaces. The machine-processable
                    form is intended to be used directly by client
                    applications. </para>
                <para>The regular expression boundary matcher "^" for
                    the rate limit takes effect after the root URI
                    path. For example, the regular expression
                    ^/servers would match the bolded portion of the
                    following URI:
                        https://servers.api.openstack.org/v2/3542812<emphasis
                        role="bold">/servers</emphasis>. </para>
                <table rules="all">
                    <caption>Sample Rate Limits</caption>
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="2">RegEx</td>
                            <td colspan="1">Default</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">*</td>
                            <td colspan="2">.*</td>
                            <td colspan="1">10/min</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">*/servers</td>
                            <td colspan="2">^/servers</td>
                            <td colspan="1">50/day</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2">*</td>
                            <td colspan="2">.*</td>
                            <td colspan="1">10/min</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">*changes-since*</td>
                            <td colspan="2">changes-since</td>
                            <td colspan="1">3/min</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2">*</td>
                            <td colspan="2">.*</td>
                            <td colspan="1">100/min</td>
                        </tr>
                    </tbody>
                </table>
                <para>Rate limits are applied in order relative to the
                    verb, going from least to most specific. For
                    example, although the threshold for &POST; to
                    */servers is 50 per day, one cannot &POST; to
                    */servers more than 10 times within a single
                    minute because the rate limits for any &POST; is
                    10/min. </para>
                <para>In the event a request exceeds the thresholds
                    established for your account, a
                        <errorcode>413</errorcode> HTTP response will
                    be returned with a <code>Retry-After</code> header
                    to notify the client when they can attempt to try
                    again. </para>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Absolute_Limits-d1e994">
                <title>Absolute Limits</title>
                <para>Absolute limits are specified as name/value
                    pairs. The name of the absolute limit uniquely
                    identifies the limit within a deployment. Please
                    consult your provider for an exhaustive list of
                    absolute value names. An absolute limit value is
                    always specified as an integer. The name of the
                    absolute limit determines the unit type of the
                    integer value. For example, the name maxServerMeta
                    implies that the value is in terms of server
                    metadata items. </para>
                <table rules="all">
                    <caption>Sample Absolute Limits</caption>
                    <thead>
                        <tr>
                            <td colspan="2">Name</td>
                            <td colspan="1">Value</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="2">maxTotalRAMSize</td>
                            <td colspan="1">51200</td>
                            <td colspan="3">Maximum total amount of
                                RAM (MB)</td>
                        </tr>
                        <tr>
                            <td colspan="2">maxServerMeta</td>
                            <td colspan="1">5</td>
                            <td colspan="3">Maximum number of metadata
                                items associated with a server</td>
                        </tr>
                        <tr>
                            <td colspan="2">maxImageMeta</td>
                            <td colspan="1">5</td>
                            <td colspan="3">Maximum number of metadata
                                items associated with an Image</td>
                        </tr>
                        <tr>
                            <td colspan="2">maxPersonality</td>
                            <td colspan="1">5</td>
                            <td colspan="3">The maximum number of file
                                path/content pairs that can be
                                supplied on server build</td>
                        </tr>
                        <tr>
                            <td colspan="2">maxPersonalitySize</td>
                            <td colspan="1">10240</td>
                            <td colspan="3">The maximum size, in
                                bytes, for each personality file</td>
                        </tr>
                    </tbody>
                </table>
            </section>
            <?hard-pagebreak?>
            <section xml:id="ProgramaticLimits">
                <title>Determining Limits Programmatically</title>
                <para>Applications can programmatically determine
                    current account limits using the /limits URI as
                    follows: </para>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2">/limits</td>
                            <td colspan="3">Returns the current limits
                                for your account</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>) </simpara>
                <para>This operation does not require a request
                    body.</para>
                <example>
                    <title>Limit Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/limits.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Limit Response: JSON</title>
                    <programlisting language="json"><?db-font-size 75% ?><xi:include href="samples/limits.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
        <section xml:id="Versions-d1e1193">
            <title>Versions</title>
            <para>The OpenStack Compute API uses both a URI and a MIME
                type versioning scheme. In the URI scheme, the first
                element of the path contains the target version
                identifier (e.g. https://servers.api.openstack.org/
                v1.0/&hellip;). The MIME type versioning scheme uses
                HTTP content negotiation where the <code>Accept</code>
                or <code>Content-Type</code> headers contains a MIME
                type that identifies the version
                (application/vnd.openstack.compute.v2+xml). A version
                MIME type is always linked to a base MIME type
                (application/xml or application/json). If conflicting
                versions are specified using both an HTTP header and a
                URI, the URI takes precedence. </para>
            <example>
                <title>Request with MIME type versioning</title>
                <literallayout class="monospaced">
GET /214412/images HTTP/1.1
Host: servers.api.openstack.org
Accept: application/vnd.openstack.compute.v2+xml
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                </literallayout>
            </example>
            <example>
                <title>Request with URI versioning</title>
                <literallayout class="monospaced">
GET /v2/214412/images HTTP/1.1
Host: servers.api.openstack.org
Accept: application/xml
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                </literallayout>
            </example>
            <note>
                <para>The MIME type versioning approach allows for the
                    creating of permanent links, because the version
                    scheme is not specified in the URI path:
                    https://api.servers.openstack.org/224532/servers/123.
                </para>
            </note>
            <?hard-pagebreak?>
            <para>If a request is made without a version specified in
                the URI or via HTTP headers, then a multiple-choices
                response (<returnvalue>300</returnvalue>) will follow
                providing links and MIME types to available versions. </para>
            <example>
                <title>Multiple Choices Response: XML</title>
                <programlisting language="xml"><xi:include href="samples/choices.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Multiple Choices Response: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/choices.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para>New features and functionality that do not break
                API-compatibility will be introduced in the current
                version of the API as extensions (see below) and the
                URI and MIME types will remain unchanged. Features or
                functionality changes that would necessitate a break
                in API-compatibility will require a new version, which
                will result in URI and MIME type version being updated
                accordingly. When new API versions are released, older
                versions will be marked as <code>DEPRECATED</code>.
                Providers should work with developers and partners to
                ensure there is adequate time to migrate to the new
                version before deprecated versions are discontinued. </para>
            <para>Your application can programmatically determine
                available API versions by performing a &GET; on the
                root URL (i.e. with the version and everything to the
                right of it truncated) returned from the
                authentication system. Note that an Atom
                representation of the versions resources is supported
                when issuing a request with the <code>Accept</code>
                header containing application/atom+xml or by adding a
                .atom to the request URI. This allows standard Atom
                clients to track version changes. </para>
            <example>
                <title>Versions List Request</title>
                <literallayout class="monospaced">
GET HTTP/1.1
Host: servers.api.openstack.org
                </literallayout>
            </example>
            <simpara> Normal Response Code(s):
                    <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
            </simpara>
            <simpara> Error Response Code(s):
                    <errorcode>400</errorcode>,
                    <errorcode>413</errorcode>,
                    <errorcode>500</errorcode>,
                    <errorcode>503</errorcode>
            </simpara>
            <para>This operation does not require a request
                body.</para>
            <example>
                <title>Versions List Response: XML</title>
                <programlisting language="xml"><xi:include href="samples/versions.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Versions List Response: Atom</title>
                <programlisting language="xml"><xi:include href="samples/versions-atom.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Versions List Response: JSON</title>
                <programlisting language="json"><?db-font-size 80% ?><xi:include href="samples/versions.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para>You can also obtain additional information about a
                specific version by performing a &GET; on the base
                version URL (such as,
                https://servers.api.openstack.org/v2/). Version
                request URLs should always end with a trailing slash
                (/). If the slash is omitted, the server may respond
                with a <returnvalue>302</returnvalue> redirection
                request. Format extensions may be placed after the
                slash (e.g.
                https://servers.api.openstack.org/v2/.xml). Note that
                this is a special case that does not hold true for
                other API requests. In general, requests such as
                /servers.xml and /servers/.xml are handled
                equivalently. </para>
            <example>
                <title>Version Details Request</title>
                <literallayout class="monospaced">
GET HTTP/1.1
Host: servers.api.openstack.org/v2/
                </literallayout>
            </example>
            <simpara> Normal Response Code(s):
                    <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): computeFault
                    (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>, &hellip;),
                serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), forbidden
                    (<errorcode>403</errorcode>), badRequest
                    (<errorcode>400</errorcode>), badMethod
                    (<errorcode>405</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
            <para>This operation does not require a request
                body</para>
            <example>
                <title>Version Details Response: XML</title>
                <programlisting language="xml"><xi:include href="samples/version.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Version Details Response: Atom</title>
                <programlisting language="xml"><xi:include href="samples/version-atom.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Version Details Response: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/version.json" parse="text"/></programlisting>
            </example>
            <para>The detailed version response contains pointers to
                both a human-readable and a machine-processable
                description of the API service. The
                machine-processable description is written in the Web
                Application Description Language (WADL). </para>
            <note>
                <para>If a discrepancy exists between the two
                    References, the WADL is authoritative as it
                    contains the most accurate and up-to-date
                    description of the API service. </para>
            </note>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Extensions-d1e1444">
            <title>Extensions</title>
            <para>The OpenStack Compute API is extensible. Extensions
                serve two purposes: They allow the introduction of new
                features in the API without requiring a version change
                and they allow the introduction of vendor specific
                niche functionality. Applications can programmatically
                determine what extensions are available by performing
                a &GET; on the /extensions URI. Note that this is a
                versioned request &mdash; that is, an extension
                available in one API version may not be available in
                another. </para>
            <informaltable rules="all">
                <thead>
                    <tr>
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/extensions</td>
                        <td colspan="3">List all available
                            extensions</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s):
                    <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): computeFault
                    (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>, &hellip;),
                serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), forbidden
                    (<errorcode>403</errorcode>), badRequest
                    (<errorcode>400</errorcode>), badMethod
                    (<errorcode>405</errorcode>), overLimit
                    (<errorcode>413</errorcode>) </simpara>
            <para>This operation does not require a request body. Each
                extension is identified by two unique identifiers, a
                    <property>namespace</property> and an
                    <property>alias</property>. Additionally an
                extension contains documentation links in various
                formats. </para>
            <?hard-pagebreak?>
            <example>
                <title>Extensions Response: XML</title>
                <programlisting language="xml"><?db-font-size 90%?><xi:include href="samples/extensions.xml" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <example>
                <title>Extensions Response: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/extensions.json" parse="text"/></programlisting>
            </example>
            <?hard-pagebreak?>
            <para>Extensions may also be queried individually by their
                unique alias. This provides the simplest method of
                checking if an extension is available as an
                unavailable extension will issue an itemNotFound
                    (<errorcode>404</errorcode>) response. </para>
            <informaltable rules="all">
                <thead>
                    <tr>
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2"
                                >/extensions/<parameter>alias</parameter></td>
                        <td colspan="3">Get details about a specific
                            extension</td>
                    </tr>
                </tbody>
            </informaltable>
            <simpara> Normal Response Code(s):
                    <returnvalue>200</returnvalue>,
                    <returnvalue>203</returnvalue>
            </simpara>
            <simpara> Error Response Code(s): computeFault
                    (<errorcode>400</errorcode>,
                    <errorcode>500</errorcode>, &hellip;),
                serviceUnavailable (<errorcode>503</errorcode>),
                unauthorized (<errorcode>401</errorcode>), forbidden
                    (<errorcode>403</errorcode>), badRequest
                    (<errorcode>400</errorcode>), badMethod
                    (<errorcode>405</errorcode>), overLimit
                    (<errorcode>413</errorcode>), itemNotFound
                    (<errorcode>404</errorcode>) </simpara>
            <?hard-pagebreak?>
            <example>
                <title>Extension Response: xml</title>
                <programlisting language="xml"><?db-font-size 90%?><xi:include href="samples/extension.xml" parse="text"/></programlisting>
            </example>
            <example>
                <title>Extension Response: JSON</title>
                <programlisting language="json"><?db-font-size 80%?><xi:include href="samples/extension.json" parse="text"/></programlisting>
            </example>
            <para>Extensions may define new data types, parameters,
                actions, headers, states, and resources. In XML,
                additional elements and attributes may be defined.
                These elements must be defined in the extension's
                namespace. In JSON, the alias must be used. The
                volumes element in the <xref linkend="ServersCBSX"
                    xrefstyle="template: Examples %n"/> and <xref
                    linkend="ServersCBSJ"
                    xrefstyle="select:
                labelnumber"/>
                is defined in the <code>RS-CBS</code> namespace.
                Actions work in exactly the same manner as illustrated
                in <xref linkend="CBSAX"
                    xrefstyle="template: Examples %n"/> and <xref
                    linkend="CBSAJ" xrefstyle="select: labelnumber"/>.
                Extended headers are always prefixed with
                    <code>X-</code> followed by the alias and a dash:
                    (<code>X-RS-CBS-HEADER1</code>). States and
                parameters must be prefixed with the extension alias
                followed by a colon. For example, an image may be in
                the <code>RS-PIE:PrepareShare</code> state. </para>
            <important>
                <para>Applications should be prepared to ignore
                    response data that contains extension elements. An
                    extended state should always be treated as an
                        <code>UNKNOWN</code> state if the application
                    does not support the extension. Applications
                    should also verify that an extension is available
                    before submitting an extended request. </para>
            </important>
            <example xml:id="ServersCBSX">
                <title>Extended Server Response: XML</title>
                <programlisting language="xml"><?db-font-size 90%?><xi:include href="samples/ext-servers.xml" parse="text"/></programlisting>
            </example>
            <example xml:id="ServersCBSJ">
                <title>Extended Server Response: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/ext-servers.json" parse="text"/></programlisting>
            </example>
            <example xml:id="CBSAX">
                <title>Extended Action: XML</title>
                <programlisting language="xml"><?db-font-size 90%?><xi:include href="samples/ext-action.xml" parse="text"/></programlisting>
            </example>
            <example xml:id="CBSAJ">
                <title>Extended Action: JSON</title>
                <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/ext-action.json" parse="text"/></programlisting>
            </example>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Faults-d1e1724">
            <title>Faults</title>
            <section xml:id="Synchronous_Faults-d1e1729">
                <title>Synchronous Faults</title>
                <para>When an error occurs at request time, the system
                    will return an HTTP error response code denoting
                    the type of error. The system will also return
                    additional information about the fault in the body
                    of the response. </para>
                <example>
                    <title>Fault Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/fault.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Fault Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/fault.json" parse="text"/></programlisting>
                </example>
                <para>The error code is returned in the body of the
                    response for convenience. The message section
                    returns a human-readable message that is
                    appropriate for display to the end user. The
                    details section is optional and may contain
                    information&mdash;for example, a stack
                    trace&mdash;to assist in tracking down an error.
                    The detail section may or may not be appropriate
                    for display to an end user. </para>
                <para>The root element of the fault (e.g.
                    computeFault) may change depending on the type of
                    error. The following is a list of possible
                    elements along with their associated error codes. </para>
                <?hard-pagebreak?>
                <table rules="all">
                    <caption>Fault Elements and Error Codes</caption>
                    <thead>
                        <tr>
                            <td>Fault Element</td>
                            <td>Associated Error Codes</td>
                            <td>Expected in All Requests?</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>computeFault</td>
                            <td>500, 400, other codes possible</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>serviceUnavailable</td>
                            <td>503</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>unauthorized</td>
                            <td>401</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>forbidden</td>
                            <td>403</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>badRequest</td>
                            <td>400</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>overLimit</td>
                            <td>413</td>
                            <td align="center">&CHECK;</td>
                        </tr>
                        <tr>
                            <td>badMediaType</td>
                            <td>415</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>badMethod</td>
                            <td>405</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>itemNotFound</td>
                            <td>404</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>buildInProgress</td>
                            <td>409</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>serverCapacityUnavailable</td>
                            <td>503</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>backupOrResizeInProgress</td>
                            <td>409</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>resizeNotAllowed</td>
                            <td>403</td>
                            <td/>
                        </tr>
                        <tr>
                            <td>notImplemented</td>
                            <td>501</td>
                            <td/>
                        </tr>
                    </tbody>
                </table>
                <example>
                    <title>Fault Response, Item Not Found: XML</title>
                    <programlisting language="xml"><xi:include href="samples/notfound.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Fault Response, Item Not Found:
                        JSON</title>
                    <programlisting language="json"><xi:include href="samples/notfound.json" parse="text"/></programlisting>
                </example>
                <para>From an XML schema perspective, all API faults
                    are extensions of the base fault type
                    ComputeAPIFault. When working with a system that
                    binds XML to actual classes (such as JAXB), one
                    should be capable of using ComputeAPIFault as a
                    “catch-all” if there's no interest in
                    distinguishing between individual fault types. </para>
                <para>The OverLimit fault is generated when a rate
                    limit threshold is exceeded. For convenience, the
                    fault adds a <property>retryAfter</property>
                    attribute that contains the content of the
                    Retry-After header in XML Schema 1.0 date/time
                    format. </para>
                <example>
                    <title>Fault Response, Over Limit: XML</title>
                    <programlisting language="xml"><xi:include href="samples/overlimit.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Fault Response, Over Limit: JSON</title>
                    <programlisting language="json"><xi:include href="samples/overlimit.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="Asynchronous_Faults-d1e2009">
                <title>Asynchronous Faults</title>
                <para>An error may occur in the background while a
                    server or image is being built or while a server
                    is executing an action. In these cases, the server
                    or image is placed in an <code>ERROR</code> state
                    and the fault is embedded in the offending server
                    or image. Note that these asynchronous faults
                    follow the same format as the synchronous ones.
                    The fault contains an error code, a human readable
                    message, and optional details about the error.
                    Additionally, asynchronous faults may also contain
                    a created timestamp that specify when the fault
                    occurred. </para>
                <?hard-pagebreak?>
                <example>
                    <title>Server In Error State: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-fault.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server In Error State: JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-fault.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Image In Error State: XML</title>
                    <programlisting language="xml"><xi:include href="samples/image-fault.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Image In Error State: JSON</title>
                    <programlisting language="json"><xi:include href="samples/image-fault.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
    </chapter>
    <chapter xml:id="API_Operations-d1e2068">
        <title>API Operations</title>
        <section xml:id="Servers-d1e2073">
            <title>Servers</title>
            <section xml:id="List_Servers-d1e2078">
                <title>List Servers</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers?<parameter>image</parameter>=<literal>imageRef</literal>&amp;
                                   <parameter>flavor</parameter>=<literal>flavorRef</literal>&amp;
                                   <parameter>name</parameter>=<literal>serverName</literal>&amp;
                                   <parameter>status</parameter>=<literal>serverStatus</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal>&amp;
                                   <parameter>changes-since</parameter>=<literal>dateTime</literal>
                            </td>
                            <td colspan="3">Lists IDs, names, and
                                links for all servers.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/detail?<parameter>image</parameter>=<literal>imageRef</literal>&amp;
                                   <parameter>flavor</parameter>=<literal>flavorRef</literal>&amp;
                                   <parameter>name</parameter>=<literal>serverName</literal>&amp;
                                   <parameter>status</parameter>=<literal>serverStatus</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal>&amp;
                                   <parameter>changes-since</parameter>=<literal>dateTime</literal>
                            </td>
                            <td colspan="3">Lists all details for all
                                servers.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>) </simpara>
                <annotation annotates="id35836359">
                    <info>
                        <title>Office Annotation</title>
                        <author>
                            <personname>
                                <othername role="full">Jorge
                                   Williams</othername>
                            </personname>
                        </author>
                        <date>2009-06-26T14:30:46</date>
                    </info>
                    <para>Well need to revisit. List all status even
                        the ones that don't enter into our state
                        transitions along with descriptions of each.
                    </para>
                </annotation>
                <para xml:id="id35836359">You can filter the list of
                    servers by image, flavor, name, and status through
                    the respective query parameters. </para>
                <para>To filter the list of servers returned in the
                    response body, specify one or more of the
                    following optional parameters in the request URI:<variablelist>
                        <varlistentry>
                            <term>image</term>
                            <listitem>
                                <para>The image reference specified as
                                   an ID or full URL. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>flavor</term>
                            <listitem>
                                <para>The flavor reference specified
                                   as an ID or full URL.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>server</term>
                            <listitem>
                                <para>The server name.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>status</term>
                            <listitem>
                                <para>The server status. See <xref
                                   linkend="server_status"/>.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>marker</term>
                            <listitem>
                                <para>The ID of the last item in the
                                   previous list. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>limit</term>
                            <listitem>
                                <para>The page size. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>changes-since</term>
                            <listitem>
                                <para>The changes-since time. The list
                                   contains servers that have been
                                   deleted since the changes-since
                                   time. See <xref
                                   linkend="ChangesSince"/>.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist></para>
                <para>This operation does not require a request
                    body.</para>
                <para>This operation lists the servers associated with
                    your account. The list does not include servers
                    that have been deleted. </para>
                <para>Servers contain a status attribute that
                    indicates the current server state. You can filter
                    on the server status when you complete a list
                    servers request. The server status is returned in
                    the response body. The server status is one of the
                    following values:<itemizedlist
                        xml:id="server_status">
                        <title>Server Status Values</title>
                        <listitem>
                            <para><code>ACTIVE</code>. The server is
                                active.</para>
                        </listitem>
                        <listitem>
                            <para><code>BUILD</code>. The server has
                                not finished the original build
                                process.</para>
                        </listitem>
                        <!--<listitem>
                                   <para>DELETE_IP. An IP address is
                                   being removed from the
                                   server.</para>
                                   </listitem> -->
                        <listitem>
                            <para><code>DELETED</code>. The server is
                                deleted.</para>
                        </listitem>
                        <listitem>
                            <para><code>ERROR</code>. The server is in
                                error.</para>
                        </listitem>
                        <listitem>
                            <para><code>HARD_REBOOT</code>. The server
                                is hard rebooting. This is equivalent
                                to pulling the power plug on a
                                physical server, plugging it back in,
                                and rebooting it.</para>
                        </listitem>
                        <listitem>
                            <para><code>PASSWORD</code>. The password
                                is being reset on the server.</para>
                        </listitem>
                        <!--     <listitem>
                              <para>PREP_RESIZE. The server is
                                   performing the initial copy of data
                                   to its new host. Server should
                                   still be active at this
                                   time.</para>
                                   </listitem> -->
                        <!--   <listitem>
                                   <para>QUEUE_RESIZE. The server is
                                   in the queue pending a resize or
                                   migration. Server should still be
                                   active at this time.</para>
                                   </listitem> -->
                        <listitem>
                            <para><code>REBOOT</code>. The server is
                                in a soft reboot state. A reboot
                                command was passed to the operating
                                system.</para>
                        </listitem>
                        <listitem>
                            <para><code>REBUILD</code>. The server is
                                currently being rebuilt from an
                                image.</para>
                        </listitem>
                        <listitem>
                            <para><code>RESCUE</code>. The server is
                                in rescue mode. </para>
                        </listitem>
                        <listitem>
                            <para><code>RESIZE</code>. Server is
                                performing the differential copy of
                                data that changed during its initial
                                copy. Server is down for this
                                stage.</para>
                        </listitem>
                        <listitem>
                            <para><code>REVERT_RESIZE</code>. The
                                resize or migration of a server failed
                                for some reason. The destination
                                server is being cleaned up and the
                                original source server is restarting.
                            </para>
                        </listitem>
                        <!-- <listitem>
                                   <para>SHARE_IP. An IP address is
                                   currently being shared with or from
                                   this server. The network
                                   configuration for this server will
                                   change, perhaps requiring an IP
                                   address. </para>
                                   </listitem>
                                   <listitem>
                                   <para>SHARE_IP_NO_CONFIG. The host
                                   is being reconfigured to allow your
                                   server to use an IP from another
                                   machine. No configuration change
                                   should occur on your guest server,
                                   however it might reboot if the
                                   kernel is not compatible with the
                                   pause state that the hypervisor
                                   requests during the process.</para>
                                   </listitem> -->
                        <listitem>
                            <para><code>SHUTOFF</code>. The virtual
                                machine (VM) was powered down by the
                                user, but not through the OpenStack
                                Compute API. For example, the user
                                issued a <code>shutdown -h</code>
                                command from within the server
                                instance. If the OpenStack Compute
                                manager detects that the VM was
                                powered down, it transitions the
                                server instance to the SHUTOFF status.
                                If you use the OpenStack Compute API
                                to restart the instance, the instance
                                might be deleted first, depending on
                                the value in the
                                   <parameter>shutdown_terminate</parameter>
                                database field on the Instance
                                model.</para>
                        </listitem>
                        <listitem>
                            <para><code>SUSPENDED</code>. The server
                                is suspended, either by request or
                                necessity. This status appears for
                                only the following hypervisors:
                                XenServer/XCP, KVM, and ESXi. Review
                                support tickets or contact Rackspace
                                support to determine why the server is
                                in this state.</para>
                        </listitem>
                        <listitem>
                            <para><code>UNKNOWN</code>. The state of
                                the server is unknown. Contact your
                                cloud provider.</para>
                        </listitem>
                        <listitem>
                            <para><code>VERIFY_RESIZE</code>. System
                                is awaiting confirmation that the
                                server is operational after a move or
                                resize.</para>
                        </listitem>
                    </itemizedlist></para>
                <para>The compute provisioning algorithm has an
                    anti-affinity property that attempts to spread
                    customer VMs across hosts. Under certain
                    situations, VMs from the same customer might be
                    placed on the same host.
                        <property>hostId</property> represents the
                    host your server runs on and can be used to
                    determine this scenario if it is relevant to your
                    application. </para>
                <note>
                    <para><property>HostId</property> is unique
                            <emphasis>per account</emphasis> and is
                        not globally unique. </para>
                </note>



                <para>The following examples show an XML and JSON
                    response for the list servers API
                    operation:</para>

                <example>
                    <title>List Servers Response: XML (detail)</title>
                    <programlisting language="xml"><?db-font-size 80%?><xi:include href="samples/servers.xml" parse="text"/></programlisting>
                </example>

                <example>
                    <title>List Servers Response: JSON
                        (detail)</title>
                    <programlisting language="json"><?db-font-size 80%?><xi:include href="samples/servers.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="CreateServers">
                <title>Create Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2">/servers</td>
                            <td colspan="3">Creates a new server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>BUILD</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>BUILD</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation asynchronously provisions a new
                    server. The progress of this operation depends on
                    several factors including location of the
                    requested image, network i/o, host load, and the
                    selected flavor. The progress of the request can
                    be checked by performing a &GET; on
                        /servers/<parameter>id</parameter>, which will
                    return a progress attribute (0-100% completion).
                    The full URL to the newly created server is
                    returned via the <code>Location</code> header and
                    is available as a <code>self</code> and
                        <code>bookmark</code> link in the server
                    representation (See <xref
                        linkend="LinksReferences"/>). Note that when
                    creating a server only the server ID, its links,
                    and the admin password are guaranteed to be
                    returned in the request. Additional attributes may
                    be retrieved by performing subsequent &GET;s on
                    the server. </para>
                <para><?rax-fo keep-together?>The following table
                    describes the required and optional attributes
                    that you can specify in the request body:</para>
                <para>
                    <table rules="all">
                        <caption>Create Server Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>imageRef</td>
                                <td>
                                   <para>The image reference for the
                                   desired image for your server
                                   instance. </para>
                                   <para>Specify as an ID or full URL.
                                   To get a list of available images,
                                   see <xref
                                   linkend="List_Images-d1e4435"
                                   />.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>flavorRef</td>
                                <td>
                                   <para>The flavor reference for the
                                   desired flavor for your server
                                   instance. </para>
                                   <para>Specify as an ID or full URL.
                                   To get a list of available flavors,
                                   see <xref
                                   linkend="List_Flavors-d1e4188"
                                   />.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>
                                   <para>name</para>
                                </td>
                                <td>
                                   <para>The server name. Choose any
                                   name you like.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>
                                   <para>metadata</para>
                                </td>
                                <td>Metadata key and value pairs. For
                                   information, see <xref
                                   linkend="Server_Metadata-d1e2529"
                                   />.</td>
                                <td>No</td>
                            </tr>
                            <tr>
                                <td valign="top">
                                   <para>personality</para>
                                </td>
                                <td>
                                   <para>File path and contents. For
                                   information, see <xref
                                   linkend="Server_Personality-d1e2543"
                                   />.</para>
                                </td>
                                <td>No</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <?hard-pagebreak?>
                <example>
                    <title>Server Create Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-post-req.json" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Server Create Response: JSON</title>
                    <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/server-post-resp.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server Create Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-post-req.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Server Create Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-post-resp.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <section xml:id="Server_Passwords-d1e2510">
                    <title>Server Passwords</title>
                    <para>A password may be specified when creating
                        the server via the optional
                            <property>adminPass</property> attribute.
                        The specified password must meet the
                        complexity requirements set by your OpenStack
                        Compute provider. The server may enter an
                            <code>ERROR</code> state if the complexity
                        requirements are not met. In this case, a
                        client may issue a change password action to
                        reset the server password (see <xref
                            linkend="Change_Password-d1e3234"/>). </para>
                    <para>If a password is not specified, a randomly
                        generated password will be assigned and
                        returned in the response object. This password
                        is guaranteed to meet the security
                        requirements set by the compute provider. For
                        security reasons, the password will not be
                        returned in subsequent &GET; calls. </para>
                </section>
                <section xml:id="Server_Metadata-d1e2529">
                    <title>Server Metadata</title>
                    <para>Custom server metadata can also be supplied
                        at launch time. See <xref
                            linkend="MetadataSection"/> for details on
                        working with metadata. The maximum size of the
                        metadata key and value is 255 bytes each. The
                        maximum number of key-value pairs that can be
                        supplied per server is determined by the
                        compute provider and may be queried via the
                        maxServerMeta absolute limit. </para>
                </section>
                <section xml:id="Server_Personality-d1e2543">
                    <title>Server Personality</title>
                    <para>You can customize the personality of a
                        server instance by injecting data into its
                        file system. For example, you might want to
                        insert ssh keys, set configuration files, or
                        store data that you want to retrieve from
                        inside the instance. This feature provides a
                        minimal amount of launch-time personalization.
                        If you require significant customization,
                        create a custom image. </para>
                    <para>Follow these guidelines when you inject
                        files: <itemizedlist>
                            <listitem>
                                <para>The maximum size of the file
                                   path data is 255 bytes.</para>
                            </listitem>
                            <listitem>
                                <para>Encode the file contents as a
                                   Base64 string. The maximum size of
                                   the file contents is determined by
                                   the compute provider and may vary
                                   based on the image that is used to
                                   create the server</para>
                                <note>
                                   <para>The maximum limit refers to
                                   the number of bytes in the decoded
                                   data and not the number of
                                   characters in the encoded
                                   data.</para>
                                </note>
                            </listitem>
                            <listitem>
                                <para>You can inject text files only.
                                   You cannot inject binary or zip
                                   files into a new build. </para>
                            </listitem>
                            <listitem>
                                <para>The maximum number of file
                                   path/content pairs that you can
                                   supply is also determined by the
                                   compute provider and is defined by
                                   the maxPersonality absolute limit.
                                </para>
                            </listitem>
                            <listitem>
                                <para>The absolute limit,
                                   maxPersonalitySize, is a byte limit
                                   that is guaranteed to apply to all
                                   images in the deployment. Providers
                                   can set additional per-image
                                   personality limits.</para>
                            </listitem>
                        </itemizedlist></para>
                    <para>The file injection might not occur until
                        after the server is built and booted. </para>
                    <para>During file injection, any existing files
                        that match specified files are renamed to
                        include the bak extension appended with a time
                        stamp. For example, if the file /etc/passwd
                        exists, it is backed up as
                        /etc/passwd.bak.1246036261.5785. </para>
                    <para>After file injection, personality files are
                        accessible by only system administrators. For
                        example, on Linux, all files have root and the
                        root group as the owner and group owner,
                        respectively, and allow user and group read
                        access only ( <code>-r--r-----</code> ).
                    </para>
                </section>
                <section xml:id="Server_Primary_Addresses-d1e2558">
                    <title>Server Access Addresses</title>
                    <para>In a hybrid environment, the IP address of a
                        server may not be controlled by the underlying
                        implementation. Instead, the access IP address
                        may be part of the dedicated hardware; for
                        example, a router/NAT device. In this case,
                        the addresses provided by the implementation
                        cannot actually be used to access the server
                        (from outside the local LAN). Here, a separate
                            <firstterm>access address</firstterm> may
                        be assigned at creation time to provide access
                        to the server. This address may not be
                        directly bound to a network interface on the
                        server and may not necessarily appear when a
                        server's addresses are queried (see <xref
                            linkend="ServerAddresses"/>). Nonetheless,
                        clients which need to access the server
                        directly are encouraged to do so via an access
                        address. In the example below, an IPv4 address
                        is assigned at creation time. </para>
                    <example>
                        <title>Creating a Server with a Access IP:
                            XML</title>
                        <programlisting language="xml"><xi:include href="samples/server-post-req-pip.xml" parse="text"/></programlisting>
                    </example>
                    <example>
                        <title>Creating a Server with a Access IP:
                            JSON</title>
                        <programlisting language="json"><xi:include href="samples/server-post-req-pip.json" parse="text"/></programlisting>
                    </example>
                    <para>Note that both IPv4 and IPv6 addresses may
                        be used as access addresses and both addresses
                        may be assigned simultaneously as illustrated
                        below. Access addresses may be updated after a
                        server has been created. See <xref
                            linkend="ServerUpdate"/> for more details. </para>
                    <example>
                        <title>Creating a Server with Multiple Access
                            IPs: XML</title>
                        <programlisting language="xml"><xi:include href="samples/server-post-req-pip2.xml" parse="text"/></programlisting>
                    </example>
                    <?hard-pagebreak?>
                    <example>
                        <title>Creating a Server with Multiple Access
                            IPs: JSON</title>
                        <programlisting language="json"><xi:include href="samples/server-post-req-pip2.json" parse="text"/></programlisting>
                    </example>
                </section>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Get_Server_Details-d1e2623">
                <title>Get Server Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter></td>
                            <td colspan="3">Lists details of the
                                specified server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI.</para>
                <para>This operation does not require a request
                    body.</para>
                <para>This operation returns the details of a specific
                    server by its ID. </para>
                <?hard-pagebreak?>
                <example>
                    <title>Server Details Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server.xml" parse="text"/></programlisting>
                </example>

                <example>
                    <title>Server Details Response: JSON</title>
                    <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/server.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="ServerUpdate">
                <title>Update Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter></td>
                            <td colspan="3">Updates the editable
                                attributes for the specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation enables you to update the
                    editable attributes of a specified server. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para><?rax-fo keep-together?>The following table
                    describes the attributes that you can specify in
                    the request body: <table rules="all">
                        <caption>Update Server Request Body
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="80%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>name</td>
                                <td>The name of the server. If you
                                   edit the server name, the server
                                   host name does not change. Also,
                                   server names are not guaranteed to
                                   be unique. </td>
                            </tr>
                            <tr>
                                <td>
                                   <para>accessIPv4</para>
                                </td>
                                <td>
                                   <para>The IP version 4 address.
                                   </para>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                   <para>accessIPv6</para>
                                </td>
                                <td>
                                   <para>The IP version 6
                                   address.</para>
                                </td>
                            </tr>
                        </tbody>
                    </table></para>
                <example>
                    <title>Server Update Name Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-put-req.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Server Update Name Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-put-req.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server Update Name Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-put-resp.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server Update Name Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-put-resp.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <para>Access addresses may simultaneously be updated
                    as illustrated below. </para>
                <example>
                    <title>Server Update Access Address Request:
                        XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-put-req-ad.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Server Update Access Address Request:
                        JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-put-req-ad.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server Update Access Address Response:
                        XML</title>
                    <programlisting language="xml"><xi:include href="samples/server-put-resp-ad.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Server Update Access Address Response:
                        JSON</title>
                    <programlisting language="json"><xi:include href="samples/server-put-resp-ad.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Delete_Server-d1e2883">
                <title>Delete Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter></td>
                            <td colspan="3">Deletes the specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>204</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>DELETED</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ERROR</code> &ARROW;
                                   <code>DELETED</code>
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation deletes a specified cloud server
                    instance from the system. </para>
                <para>Specify the ID for the cloud server instance as
                        <parameter>id</parameter> in the URI. </para>
                <para>This operation does not require a request body
                    or return a response body. </para>
            </section>
        </section>
        <?hard-pagebreak?>
        <section xml:id="ServerAddresses">
            <title>Server Addresses</title>
            <section xml:id="List_Addresses-d1e3014">
                <title>List Addresses</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/ips</td>
                            <td colspan="3">Lists all networks and
                                addresses associated with a specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>This operation lists all networks and addresses
                    associated with a specified server. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>This operation does not require a request body. </para>
                <?hard-pagebreak?>
                <example>
                    <title>Addresses List Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/addresses.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Addresses List Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/addresses.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="List_Addresses_by_Network-d1e3118">
                <title>List Addresses by Network</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/ips/<parameter>networkID</parameter></td>
                            <td colspan="3">Lists addresses associated
                                with a specified server and
                                network.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>This operation lists all addresses associated
                    with a specified server and network. </para>
                <para>The following table describes the required
                    parameters that you specify in the request URI:
                        <table rules="all">
                        <caption>List Addresses by Network URI
                            Parameters</caption>
                        <col width="20%"/>
                        <col width="80%"/>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                   <para>id</para>
                                </td>
                                <td>
                                   <para>The server ID.</para>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                   <para>networkID</para>
                                </td>
                                <td>
                                   <para>The network ID.</para>
                                </td>
                            </tr>
                        </tbody>
                    </table></para>
                <para>This operation does not require a request
                    body.</para>
                <example>
                    <title>List Addresses by Network Response:
                        XML</title>
                    <programlisting language="xml"><xi:include href="samples/public.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>List Addresses by Network Response:
                        JSON</title>
                    <programlisting language="json"><xi:include href="samples/public.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Server_Actions-d1e3229">
            <title>Server Actions</title>
            <section xml:id="Change_Password-d1e3234">
                <title>Change Administrator Password</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Changes the administrator
                                password for a specified server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>PASSWORD</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>PASSWORD</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ERROR</code> &ARROW;
                                   <code>PASSWORD</code> &ARROW;
                                   <code>ACTIVE</code> (password reset
                                after error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation changes the administrator
                    password for a specified server. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>The specified password must meet the complexity
                    requirements set by your OpenStack Compute
                    provider. The server might enter an
                        <code>ERROR</code> state if the complexity
                    requirements are not met. In this case, a client
                    may reissue the change password action. </para>
                <para>In the request body, specify the
                        <parameter>changePassword</parameter> action
                    followed by attributes. The following table
                    describes the attributes that you specify in the
                    request body:<table rules="all">
                        <caption>Change Administrator Password Request
                            Body Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>adminPass</td>
                                <td>The administrator password.</td>
                                <td>Yes</td>
                            </tr>
                        </tbody>
                    </table></para>
                <para>This operation does not return a response
                    body.</para>
                <example>
                    <title>Action Change Password Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/changepassword.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Action Change Password Request:
                        JSON</title>
                    <programlisting language="json"><xi:include href="samples/changepassword.json" parse="text"/></programlisting>
                </example>
                <para/>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Reboot_Server-d1e3371">
                <title>Reboot Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Reboots the specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>REBOOT</code> &ARROW;
                                   <code>ACTIVE</code> (<property>soft
                                   reboot</property>) </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>HARD_REBOOT</code> &ARROW;
                                   <code>ACTIVE</code> (<property>hard
                                   reboot</property>) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation enables you to complete either a
                    soft or hard reboot of a specified server. With a
                    soft reboot (<code>SOFT</code>), the operating
                    system is signaled to restart, which allows for a
                    graceful shutdown of all processes. A hard reboot
                        (<code>HARD</code>) is the equivalent of power
                    cycling the server. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>reboot</parameter> action followed
                    by attributes. </para>
                <para>The following table describes the attributes
                    that you specify in the request body:</para>
                <para>
                    <table rules="all">
                        <caption>Reboot Server Request
                            Attributes</caption>

                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>type</td>
                                <td>
                                   <para>The type of reboot:<itemizedlist>
                                   <listitem>
                                   <para><parameter>SOFT</parameter>.
                                   The operating system is signaled to
                                   restart, which allows for a
                                   graceful shutdown of all
                                   processes.</para>
                                   </listitem>
                                   <listitem>
                                   <para><parameter>HARD</parameter>.
                                   Equivalent to power cycling the
                                   server. </para>
                                   </listitem>
                                   </itemizedlist></para>
                                </td>
                                <td>No. Default is SOFT.</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>This operation does not return a response
                    body.</para>
                <example>
                    <title>Action Reboot Request: XML </title>
                    <programlisting language="xml"><xi:include href="samples/reboot.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Action Reboot Request: JSON </title>
                    <programlisting language="json"><xi:include href="samples/reboot.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Rebuild_Server-d1e3538">
                <title>Rebuild Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Rebuilds the specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>REBUILD</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>REBUILD</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>The rebuild operation removes all data on the
                    server and replaces it with the specified image.
                    The <property>serverRef</property> and all IP
                    addresses will remain the same. If
                        <property>name</property>,
                        <property>metadata</property>,
                        <property>accessIPv4</property>, or
                        <property>accessIPv6</property> are specified,
                    they will replace existing values, otherwise they
                    do not change. </para>
                <para>A rebuild operation always removes data injected
                    into the file system through server
                        <property>personality</property>. You can
                    reinsert data into the file system during the
                    rebuild. The full URL to the rebuilt server is
                    returned through the <code>Location</code> header. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>rebuild</parameter> action followed
                    by attributes. </para>
                <para>The following table describes the attributes
                    that you specify in the request body:</para>
                <para>
                    <table rules="all">
                        <caption>Rebuild Server Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>name</td>
                                <td>The new name for the server.</td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>imageRef</td>
                                <td>
                                   <para>The image reference. Specify
                                   as an ID or full URL. </para>
                                </td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>accessIPv4</td>
                                <td>The IP version 4 address.</td>
                                <td>No</td>
                            </tr>
                            <tr>
                                <td>accessIPv6</td>
                                <td>The IP version 6 address.</td>
                                <td>No</td>
                            </tr>
                            <tr>
                                <td>adminPass</td>
                                <td>The administrator password.</td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>metadata</td>
                                <td>A metadata key and value
                                   pair.</td>
                                <td>No</td>
                            </tr>
                            <tr>
                                <td>personality</td>
                                <td>The file path and file
                                   contents.</td>
                                <td>No</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <example>
                    <title>Action Rebuild Request: XML </title>
                    <programlisting language="xml"><xi:include href="samples/rebuild_all.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Action Rebuild Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/rebuild_all.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Action Rebuild Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/rebuild-resp.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Action Rebuild Response: JSON</title>
                    <programlisting language="json"><?db-font-size 90%?><xi:include href="samples/rebuild-resp.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Resize_Server-d1e3707">
                <title>Resize Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Resizes the specified
                                server.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    resizeNotAllowed (<errorcode>403</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable rules="all">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>RESIZE</code> &ARROW;
                                   <code>VERIFY_RESIZE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>RESIZE</code> &ARROW;
                                   <code>ACTIVE</code> (on error)
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>The resize operation converts an existing server
                    to a different flavor, in essence, scaling the
                    server up or down. The original server is saved

                    for a period of time to allow rollback if a problem occurs.
You should test and explicitly confirm all resizes. When you confirm a resize, 
the original server is removed. 
All resizes are automatically
                    confirmed after 24 hours if you do not
                    explicitly confirm or revert them. </para>
<para>Depending on the cloud provider, this operation might result in billing you for a snapshot. </para>

                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>resize</parameter> action followed
                    by attributes. The following table describes the
                    attributes that you specify in the request
                    body:</para>
                <para>
                    <table rules="all">
                        <caption>Resize Server Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>name</td>
                                <td>The name for the resized
                                   server.</td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>flavorRef</td>
                                <td>
                                   <para>The flavor ID
                                   :<programlisting><parameter>flavor_id</parameter></programlisting></para>
                                </td>
                                <td>Yes</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>This operation does not return a response
                    body.</para>
                <example>
                    <title>Action Resize Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/resize.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Action Resize Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/resize.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Confirm_Resized_Server-d1e3868">
                <title>Confirm Resized Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Confirms a pending resize
                                action.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>204</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    resizeNotAllowed (<errorcode>403</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>VERIFY_RESIZE</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>VERIFY_RESIZE</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>During a resize operation, the original server
                    is saved for a period of time to allow roll back
                    if a problem exists. Once the newly resized server
                    is tested and has been confirmed to be functioning
                    properly, use this operation to confirm the
                    resize. After confirmation, the original server is
                    removed and cannot be rolled back to. All resizes
                    are automatically confirmed after 24 hours if they
                    are not explicitly confirmed or reverted. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>confirmResize</parameter> action. </para>
                <para>This operation does not return a response
                    body.</para>
                <example>
                    <title>Action Confirm Resize Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/confirmresize.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Action Confirm Resize Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/confirmresize.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Revert_Resized_Server-d1e4024">
                <title>Revert Resized Server</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Cancels and reverts a
                                pending resize action.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    resizeNotAllowed (<errorcode>403</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>VERIFY_RESIZE</code> &ARROW;
                                   <code>REVERT_RESIZE</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>VERIFY_RESIZE</code> &ARROW;
                                   <code>REVERT_RESIZE</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>During a resize operation, the original server
                    is saved for a period of time to allow for roll
                    back if a problem occurs. If the resized server has a problem, use the
                    revert resize operation to revert the resize and
                    roll back to the original server. All resizes are
                    automatically confirmed after 24 hours if you do not confirm or
                    revert them. </para>
<note><para>Depending on your cloud provider, this operation might result in billing you for a snapshot.</para></note>
                <para>Specify the server ID as
                    <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>revertResize</parameter> action
                    followed by attributes.</para>
                <para>This operation does not return a response
                    body.</para>
                <example>
                    <title>Action Revert Resize Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/revertresize.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Action Revert Resize Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/revertresize.json" parse="text"/></programlisting>
                </example>
                <para>This operation does not return a response
                    body.</para>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Create_Image-d1e4655">
                <title>Create Image</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/action</td>
                            <td colspan="3">Creates a new image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>202</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    backupOrResizeInProgress
                        (<errorcode>409</errorcode>), resizeNotAllowed
                        (<errorcode>403</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>),
                    serverCapacityUnavailable
                        (<errorcode>503</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Image Status
                                Transition:</td>
                            <td colspan="3">
                                <code>SAVING</code> &ARROW;
                                   <code>ACTIVE</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>SAVING</code> &ARROW;
                                   <code>ERROR</code> (on error) </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation creates a new image for the given
                    server. Once complete, a new image will be
                    available that can be used to rebuild or create
                    servers. The full URL to the newly created image
                    is returned via the <code>Location</code> header,
                    additional attributes for the image including
                    creation status may be retrieved by performing a
                    subsequent &GET; on that URL. See <xref
                        linkend="Get_Image_Details-d1e4848"/> for
                    details. </para>
                <para>Custom image metadata can also be supplied when
                    creating an image. See <xref
                        linkend="MetadataSection"/> for details on
                    working with metadata. The maximum size of the
                    metadata key and value is 255 bytes each. The
                    maximum number of key-value pairs that can be
                    supplied per image is determined by the compute
                    provider and may be queried through the
                    maxImageMeta absolute limit. </para>
                <para>Specify the server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>createImage</parameter> action
                    followed by attributes. The following table
                    describes the attributes that you specify in the
                    request body:</para>
                <para>
                    <table rules="all">
                        <caption>Create Image Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>

                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>name</td>
                                <td>The name for the new image.</td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td>metadata</td>
                                <td>
                                   <para>Key and value pairs for
                                   metadata.</para>
                                </td>
                                <td>No</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>This operation does not return a response
                    body.</para>
                <note>
                    <para>At present, image creation is an
                        asynchronous operation, so coordinating the
                        creation with data quiescence, and so on is
                        currently not possible. </para>
                </note>
                <example>
                    <title>Action Create Image Request: XML</title>
                    <programlisting language="xml"><xi:include href="samples/createimage.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Action Create Image Request: JSON</title>
                    <programlisting language="json"><xi:include href="samples/createimage.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
        <?hard-pagebreak?>


        <section xml:id="Flavors-d1e4180">

            <title>Flavors</title>
            <para>A flavor is an available hardware configuration for
                a server. Each flavor has a unique combination of disk
                space and memory capacity. </para>
            <section xml:id="List_Flavors-d1e4188">
                <title>List Flavors</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/flavors?<parameter>minDisk</parameter>=<literal>minDiskInGB</literal>&amp;
                                   <parameter>minRam</parameter>=<literal>minRamInMB</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal>
                            </td>
                            <td colspan="3">Lists IDs, names, and
                                links for all available flavors.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/flavors/detail?<parameter>minDisk</parameter>=<literal>minDiskInGB</literal>&amp;
                                   <parameter>minRam</parameter>=<literal>minRamInMB</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal></td>
                            <td colspan="3">Lists all details for all
                                available flavors.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>) </simpara>
                <para>This operation lists information for all
                    available flavors. </para>
                <para>To filter the list of flavors returned in the
                    response body, you can specify the following
                    optional parameters in the URI:</para>
                <para>
                    <variablelist>
                        <varlistentry>
                            <term><parameter>minDisk</parameter>=<literal>minDiskInGB</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of flavors to
                                   those with the specified minimum
                                   number of gigabytes of disk
                                   storage.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>minRam</parameter>=<literal>minRamInMB</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of flavors to
                                   those with the specified minimum
                                   amount of RAM in megabytes. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>marker</parameter>=<literal>markerID</literal>&amp;</term>
                            <listitem>
                                <para>The ID of the last item in the
                                   previous list. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>limit</parameter>=<literal>int</literal></term>
                            <listitem>
                                <para>Sets the page size. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <para>This operation does not require a request body. </para>
                <example>
                    <title>Flavors List Response: XML (detail) </title>
                    <programlisting language="xml"><xi:include href="samples/flavors.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Flavors List Response: JSON
                        (detail)</title>
                    <programlisting language="json"><?db-font-size 90% ?><xi:include href="samples/flavors.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Get_Flavor_Details-d1e4317">
                <title>Get Flavor Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/flavors/<parameter>id</parameter></td>
                            <td colspan="3">Lists details of the
                                specified flavor.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <para>Specify the flavor ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>This operation does not require a request
                    body.</para>
                <para>This operation returns details of the specified
                    flavor in the response body.</para>
                <example>
                    <title>Flavor Details Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/flavor.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Flavor Details Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/flavor.json" parse="text"/></programlisting>
                </example>
            </section>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Images-d1e4427">
            <title>Images</title>
            <para>An image is a collection of files you use to create
                or rebuild a server. Operators provide pre-built OS
                images by default. You may also create custom images. </para>
            <section xml:id="List_Images-d1e4435">
                <title>List Images</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/images?<parameter>server</parameter>=<literal>serverRef</literal>&amp;
                                   <parameter>name</parameter>=<literal>imageName</literal>&amp;
                                   <parameter>status</parameter>=<literal>imageStatus</literal>&amp;
                                   <parameter>changes-since</parameter>=<literal>dateTime</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal>&amp;
                                   <parameter>type</parameter>=(<constant>BASE</constant>|<constant>SERVER</constant>) </td>
                            <td colspan="3">Lists IDs, names, and
                                links for all available images.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/images/detail?<parameter>server</parameter>=<literal>serverRef</literal>&amp;
                                   <parameter>name</parameter>=<literal>imageName</literal>&amp;
                                   <parameter>status</parameter>=<literal>imageStatus</literal>&amp;
                                   <parameter>changes-since</parameter>=<literal>dateTime</literal>&amp;
                                   <parameter>marker</parameter>=<literal>markerID</literal>&amp;<parameter>limit</parameter>=<literal>int</literal>&amp;
                                   <parameter>type</parameter>=(<constant>BASE</constant>|<constant>SERVER</constant>) </td>
                            <td colspan="3">Lists all details for all
                                available images.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>) </simpara>
                <para>This operation lists all images visible by the
                    account. </para>
                <para>To filter the list of images returned in the
                    response body, you can specify the following
                    optional parameters in the URI:</para>
                <para>
                    <variablelist>
                        <varlistentry>
                            <term><parameter>server</parameter>=<literal>serverRef</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of images by
                                   server. Specify the server
                                   reference by ID or by full
                                   URL.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>name</parameter>=<literal>imageName</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of images by
                                   image name. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>status</parameter>=<literal>imageStatus</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of images by
                                   status. In-flight images will have
                                   the status attribute set to
                                   <code>SAVING</code> and the
                                   conditional progress element
                                   (0-100% completion) will also be
                                   returned. Other possible values for
                                   the status attribute include:
                                   <code>UNKNOWN</code>,
                                   <code>ACTIVE</code>,
                                   <code>SAVING</code>,
                                   <code>ERROR</code>, and
                                   <code>DELETED</code>. Images with
                                   an <code>ACTIVE</code> status are
                                   available for install. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>changes-since</parameter>=<literal>dateTime</literal>&amp;</term>
                            <listitem>
                                <para>Filters the list of images to
                                   those that have changed since the
                                   changes-since time. See <xref
                                   linkend="ChangesSince"/> for
                                   details. </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>marker</parameter>=<literal>markerID</literal>&amp;</term>
                            <listitem>
                                <para>The ID of the last item in the
                                   previous list. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>limit</parameter>=<literal>int</literal></term>
                            <listitem>
                                <para>Sets the page size. See <xref
                                   linkend="Paginated_Collections-d1e664"
                                   />.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>type</parameter>={BASE|SERVER}</term>
                            <listitem>
                                <para>Filters base images or server
                                   backups.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <para>This operation does not require a request body.
                    The optional minDisk and minRam attributes set the
                    minimum disk and RAM requirements needed to create
                    a server with the image. </para>
                <?hard-pagebreak?>
                <example>
                    <title>Images List Response: XML (detail)</title>
                    <programlisting language="xml"><xi:include href="samples/images.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Images List Response: JSON (detail)</title>
                    <programlisting language="json"><?db-font-size 80%?><xi:include href="samples/images.json" parse="text"/></programlisting>
                </example>
            </section>
            <section xml:id="Get_Image_Details-d1e4848">
                <title>Get Image Details</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter></td>
                            <td colspan="3">Lists details of the
                                specified image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <para>Specify the image ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>This operation does not require a request
                    body.</para>
                <db:para>This operation returns details of the
                    specified image in the response body.</db:para>
                <example>
                    <title>Image Details Response: XML</title>
                    <programlisting language="xml"><xi:include href="samples/image.xml" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Image Details Response: JSON</title>
                    <programlisting language="json"><xi:include href="samples/image.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Delete_Image-d1e4957">
                <title>Delete Image</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter></td>
                            <td colspan="3">Deletes the specified
                                image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>204</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <informaltable frame="void">
                    <tbody>
                        <tr>
                            <td colspan="1">Status Transition:</td>
                            <td colspan="3">
                                <code>ACTIVE</code> &ARROW;
                                   <code>DELETED</code>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="1"/>
                            <td colspan="3">
                                <code>ERROR</code> &ARROW;
                                   <code>DELETED</code>
                            </td>
                        </tr>
                    </tbody>
                </informaltable>
                <para>This operation deletes the specified image from
                    the system. </para>
                <para>Specify the image ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>Images are immediately removed. </para>
                <para>This operation does not require a request
                    body.</para>
                <para>This operation does not return a response
                    body.</para>
            </section>
        </section>
        <?hard-pagebreak?>
        <section xml:id="MetadataSection">
            <title>Metadata</title>
            <para>The following operations allow access to metadata
                after a server or image has been created. </para>
            <section xml:id="List_Metadata-d1e5089">
                <title>List Metadata</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Lists metadata associated
                                with a server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Lists metadata associated
                                with an image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <para>Lists all metadata. </para>
                <para>Specify the server or image ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>This operation does not require a request body. </para>
                <example>
                    <title>Metadata List Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Metadata List Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Create_or_Replace_Metadata-d1e5358">
                <title>Set Metadata</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Sets metadata for a
                                specified server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Sets metadata for a
                                specified image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>Sets metadata for the specified image or server. </para>
                <para>Specify the image or server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>metadata</parameter> element
                    followed by attributes. The following table
                    describes the attributes that you specify in the
                    request body:</para>
                <para>
                    <table rules="all">
                        <caption>Set Metadata Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>meta</td>
                                <td>
                                   <para>Key and value pairs for
                                   metadata.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>Existing metadata items are replaced with the
                    ones provided in the request. An overLimit
                        (<errorcode>413</errorcode>) fault may be
                    thrown if the maximum number of metadata items is
                    exceeded. The maximum number of key-value pairs
                    that can be supplied per server is determined by
                    the compute provider and may be queried via the
                    maxServerMeta absolute limit. The maximum number
                    of key-value pairs for an image may be queried via
                    the maxImageMeta absolute limit. </para>
                <example>
                    <title>Set Metadata Request: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Set Metadata Request: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Set Metadata Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Set Metadata Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Update_Metadata-d1e5208">
                <title>Update Metadata</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Updates metadata items for
                                the specified server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&POST;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata</td>
                            <td colspan="3">Updates metadata items for
                                the specified image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>Updates resource metadata. </para>
                <para>Specify the image or server ID as
                        <parameter>id</parameter> in the URI. </para>
                <para>In the request body, specify the
                        <parameter>metadata</parameter> element
                    followed by attributes. The following table
                    describes the attributes that you specify in the
                    request body:</para>
                <para>
                    <table rules="all">
                        <caption>Update Metadata Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>meta</td>
                                <td>
                                   <para>Key and value pairs for
                                   metadata.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>Updates will replace existing metadata items
                    with the same key. Items not explicitly mentioned
                    in the request will not be modified. An overLimit
                        (<errorcode>413</errorcode>) fault may be
                    thrown if the operation causes the maximum number
                    of metadata items to be exceeded. The maximum
                    number of key-value pairs that can be supplied per
                    server is determined by the compute provider and
                    may be queried via the maxServerMeta absolute
                    limit. The maximum number of key-value pairs for
                    an image may be queried via the maxImageMeta
                    absolute limit. </para>
                <example>
                    <title>Update Metadata Request: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata-update-req.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Update Metadata Request: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata-update-req.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Update Metadata Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata-update-resp.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Update Metadata Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata-update-resp.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Get_Metadata_Item-d1e5507">
                <title>Get Metadata Item</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Gets a metadata item
                                associated with a server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&GET;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Gets a metadata item
                                associated with an image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>) </simpara>
                <para>Retrieves a single metadata item by key. </para>
                <para>In the URI, specify the image or server ID as
                        <parameter>id</parameter> and the key as
                        <parameter>key</parameter>.</para>
                <para>This operation does not require a request body. </para>
                <example>
                    <title>Metadata Item Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata_item.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Metadata Item Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata_item.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Create_or_Update_a_Metadata_Item-d1e5633">
                <title>Set Metadata Item</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Sets a metadata item for a
                                specified server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&PUT;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Sets a metadata item for a
                                specified image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>
                </simpara>
                <simpara>Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), badMediaType
                        (<errorcode>415</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>Sets a metadata item by its key. </para>
                <para>In the URI, specify the image or server ID as
                        <parameter>id</parameter> and the key as
                        <parameter>key</parameter>.</para>
                <para>In the request body, specify the
                        <parameter>metadata</parameter> element
                    followed by attributes. The following table
                    describes the attributes that you specify in the
                    request body:</para>
                <para><table rules="all">
                        <caption>Set Metadata Item Request
                            Attributes</caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <col width="20%"/>
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Description</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>meta</td>
                                <td>
                                   <para>Key and value pairs for
                                   metadata.</para>
                                </td>
                                <td>Yes</td>
                            </tr>
                        </tbody>
                    </table>An overLimit (<errorcode>413</errorcode>)
                    fault may be thrown if the operation causes the
                    maximum number of metadata items to be exceeded.
                    The maximum number of key-value pairs that can be
                    supplied per server is determined by the compute
                    provider and may be queried via the maxServerMeta
                    absolute limit. The maximum number of key-value
                    pairs for an image may be queried via the
                    maxImageMeta absolute limit. </para>
                <example>
                    <title>Set Metadata Item Request: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata_item.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Set Metadata Item Request: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata_item.json" parse="text"/></programlisting>
                </example>
                <?hard-pagebreak?>
                <example>
                    <title>Set Metadata Item Response: XML </title>
                    <programlisting language="xml"><xi:include href="samples/metadata_item.xml" parse="text"/></programlisting>
                </example>
                <example>
                    <title>Set Metadata Item Response: JSON </title>
                    <programlisting language="json"><xi:include href="samples/metadata_item.json" parse="text"/></programlisting>
                </example>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Delete_Metadata_Item-d1e5790">
                <title>Delete Metadata Item</title>
                <informaltable rules="all">
                    <thead>
                        <tr>
                            <td colspan="1">Verb</td>
                            <td colspan="2">URI</td>
                            <td colspan="3">Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                   >/servers/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Deletes a metadata item
                                for the specified server.</td>
                        </tr>
                        <tr>
                            <td colspan="1">&DELETE;</td>
                            <td colspan="2"
                                   >/images/<parameter>id</parameter>/metadata/<parameter>key</parameter></td>
                            <td colspan="3">Deletes a metadata item
                                for the specified image.</td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>204</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): computeFault
                        (<errorcode>400</errorcode>,
                        <errorcode>500</errorcode>, &hellip;),
                    serviceUnavailable (<errorcode>503</errorcode>),
                    unauthorized (<errorcode>401</errorcode>),
                    forbidden (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), badMethod
                        (<errorcode>405</errorcode>), overLimit
                        (<errorcode>413</errorcode>), itemNotFound
                        (<errorcode>404</errorcode>), buildInProgress
                        (<errorcode>409</errorcode>) </simpara>
                <para>Deletes a metadata item. </para>
                <para>In the URI, specify the image or server ID as
                        <parameter>id</parameter> and the key as
                        <parameter>key</parameter>.</para>
                <para>The operation does not require a request body. </para>
                <para>The operation does not return a response body.
                </para>
            </section>
        </section>
    </chapter>
    <chapter xml:id="ext-compute" role="api-reference"
        xmlns="http://docbook.org/ns/docbook"
        xmlns:html="http://www.w3.org/1999/xhtml"
        xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <title>Compute Extensions</title>
        <section xml:id="ext-os-admin-actions">
            <title>Server Admin Actions</title>
            <para>Permits administrative users to perform actions on
                servers.</para>
            <wadl:resources href="wadl/os-admin-actions.wadl"/>
        </section>
        <?hard-pagebreak?>
    </chapter>
</book>
